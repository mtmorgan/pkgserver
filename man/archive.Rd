% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/archive.R
\name{archive_platform}
\alias{archive_platform}
\alias{archive_statistics}
\alias{archive_need}
\alias{archive_install}
\alias{archive_update}
\alias{archive_add}
\title{Manage package archives.}
\usage{
archive_platform()

archive_statistics(platform = archive_platform(), bioc_version = version())

archive_need(tbl, platform = archive_platform(), bioc_version = version())

archive_install(
  tbl,
  platform = archive_platform(),
  bioc_version = version(),
  repos = repositories(),
  verbose = getOption("verbose")
)

archive_update(
  platform = archive_platform(),
  bioc_version = version(),
  repos = repositories(),
  verbose = getOption("verbose")
)

archive_add(
  source,
  platform = archive_platform(),
  bioc_version = version(),
  force = FALSE
)
}
\arguments{
\item{platform}{\code{character(1)} description of the platform for
which packages are being archived. The default is the platform
on which the function is being evaluated.}

\item{bioc_version}{Bioconductor version for which the archive
applies. Default is from \code{BiocManager::version()}.}

\item{tbl}{a \code{tibble()} with character columns \code{Package} and
\code{Version}.}

\item{repos}{\code{character()} of CRAN-style repositories where
packages sources are to be retrieved from.}

\item{verbose}{\code{logical(1)} request for additional progress
indications, including from \code{install.packages()}.}

\item{source}{\code{character()} path to local file system built
tarballs of packages to be archived, or directories of built
packages (e.g., the installation library path of the building
platform).}

\item{force}{\code{logical(1)} force update of identical archives.}
}
\value{
\code{archive_platform()} returns character(1) description of
the platform.

\code{archive_statistics()} returns an S3 list-based object with
package statistics, visuallized using \code{print()}.

\code{archive_need()} returns a tibble with of Package, Version,
and digest of all packages needing to be archived.

\code{archive_install()} returns a tbl containing Package,
Version, digest, and archive path suitable for use in binary
installation via \code{install.packages()}.

\code{archive_update()} returns a tibble of newly archived
packages with the same structure as \code{archive_install()}.

\code{archive_add()} returns a tibble with Package, Version,
digest, and \code{is_archived} flag indicating success at archiving
the package.
}
\description{
\code{archive_platform()} provide a platform description
for the session in which this package is running.

\code{archive_statistics()} queries the archive for
information about disk usage, available platforms, and archived
packages.

\code{archive_need()} identifies which packages have been
archived.

\code{archive_install()} builds, installs, and archives
packages in \code{tbl} that are not already archived.

\code{archive_update()} updates all archived packages to
their current version.

\code{archive_add()} allows packages to be archived without
installation, e.g., when the archiver is not running on the
target platform.
}
